/** * This class creates nodes that store elements of a given type, contain a pointer to the next node, and have a priority. * @author Iulia Murariu *  */public class PriorityNode<E>{		/**Attribute declarations*/	private E element; //element to be stored in node	private PriorityNode<E> next; //pointer to the next node	private double priority; //determines priority 	/**Default constructor creates node without a specified element*/	public PriorityNode(){		element = null; //element is set to null		next = null; //next node is set to null		priority = 0; //priority is set to 0 	}		/**Constructor creates a node containing a specified element */	public PriorityNode(E ele){		element = ele; //element is set to the input element 		next = null; //next is set to null		priority = 0; //piority is set to null	}	/**getNext returns the next node in the linked list	 * @return next node	 */	public PriorityNode<E> getNext(){		return next;	}		/**setNext allows user to set the current node's next node to something else	 * @param new node we want to have current node point towards	 */	public void setNext(PriorityNode<E> newNode){		next = newNode;	}	/**getElement shows user the element in the current node	 * @return element in the current node	 */	public E getElement(){		return element;	}	/**setElement allows user to set a different element to the current node	 * @param element we want current node to contain	 */	public void setElement(E elem){		element = elem;	}		/**getPriority allows user to access priority of current node	 * @return priority of current node	 */	public double getPriority(){		return priority;	}		/**allows user to set the priority of the current node	 * @param priority of the current node 	 */ 	public void setPriority(double t){		priority = t;	}}